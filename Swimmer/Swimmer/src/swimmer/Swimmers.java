/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swimmer;

import com.sun.istack.internal.FinalArrayList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SomeBody
 */
public class Swimmers extends javax.swing.JFrame {

    /**
     * Creates new form Swimmers
     */
    public ArrayList<Swimmer> list = new ArrayList<Swimmer>();
    public ArrayList<Swimmer> clonedList = new ArrayList<Swimmer>();
    DefaultTableModel model;
    DefaultTableModel copyModel;
    Object[] rowData = new Object[5];
    ArrayList<String> nameList = new ArrayList<String>();
    public ArrayList<Swimmer> SortedByNameList = new ArrayList<Swimmer>();
    public Swimmers() {
        initComponents();
        
        model = (DefaultTableModel) orginalTable.getModel();
        copyModel = (DefaultTableModel) copyTable.getModel();
        SwimmerData data = new FirstFetchData();
            list = (ArrayList<Swimmer>) data.getData();
            DisplayToTable(list, model);
        try {
            SwimmerData clonedData = (SwimmerData) data.cloneMe();
            clonedList = (ArrayList<Swimmer>) clonedData.getData();
//            Collections.sort();
            
            for(int i=0; i<list.size(); i++){
                nameList.add(clonedList.get(i).name);
            }
//            System.out.println("Names:"+nameList);
            Collections.sort(nameList);
//            System.out.println("Names:"+nameList);
            nameList.forEach((name)->{
                int i=0;
                clonedList.forEach((swimmer)->{
                    if(swimmer.name.equals(name)){
                        SortedByNameList.add(swimmer);
                    }
                });
            });
            DisplayToTable(SortedByNameList, copyModel);

            
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(Swimmers.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    public ArrayList<Swimmer> Sort(ArrayList<Swimmer> tobesorted,String sortby){
        ArrayList<Swimmer> sorted = new ArrayList<Swimmer>();
        ArrayList<String> tempList = new ArrayList<String>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        ArrayList<Integer> temp1 = new ArrayList<Integer>();
        for(int i=0; i<tobesorted.size(); i++){
            if(sortby.equals("name")){
                tempList.add(tobesorted.get(i).name);
                Collections.sort(tempList);
//              System.out.println("Names:"+nameList);
                tempList.forEach((name)->{
                tobesorted.forEach((swimmer)->{
                    if(swimmer.name.equals(name)){
                        sorted.add(swimmer);
                    }
                });
            });
            }else if(sortby.equals("sex")){
                tempList.add(tobesorted.get(i).Sex);
                Collections.sort(tempList);
//              System.out.println(tempList);
                tempList.forEach((sex)->{
                tobesorted.forEach((swimmer)->{
                    if(swimmer.Sex.equals(sex)){
                        sorted.add(swimmer);
                    }
                    });
                });
//                System.out.println(tempList);
            }else if(sortby.equals("age")){
                temp.add(tobesorted.get(i).age);
                Collections.sort(temp);
                temp.forEach((age)->{
                    tobesorted.forEach(swimmer->{
                        if(swimmer.age == age){
                            sorted.add(swimmer);
                        }
                    });
                });
            }
        }
//            System.out.println("Names:"+nameList);
        
        return sorted; 
        
    }
    
    public void DisplayToTable(ArrayList<Swimmer> swimmer, DefaultTableModel model){
            for(int i=0; i<swimmer.size(); i++){
                rowData[0] = i+1;
                rowData[1] = swimmer.get(i).name;
                rowData[2] = swimmer.get(i).Sex;
                rowData[3] = swimmer.get(i).age;
                rowData[4] = swimmer.get(i).time;
                model.addRow(rowData);
            }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        iName = new javax.swing.JTextField();
        iTime = new javax.swing.JTextField();
        iAge = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        iSex = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orginalTable = new javax.swing.JTable();
        comboSort = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        copyTable = new javax.swing.JTable();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        iTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iTimeActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel2.setText("Time");

        jLabel3.setText("Age");

        iSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        jLabel4.setText("Sex");

        orginalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N0", "Name", "Sex", "Age", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orginalTable);
        if (orginalTable.getColumnModel().getColumnCount() > 0) {
            orginalTable.getColumnModel().getColumn(0).setMinWidth(30);
            orginalTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            orginalTable.getColumnModel().getColumn(0).setMaxWidth(40);
            orginalTable.getColumnModel().getColumn(2).setMinWidth(60);
            orginalTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            orginalTable.getColumnModel().getColumn(2).setMaxWidth(60);
            orginalTable.getColumnModel().getColumn(3).setMinWidth(50);
            orginalTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            orginalTable.getColumnModel().getColumn(3).setMaxWidth(50);
            orginalTable.getColumnModel().getColumn(4).setMinWidth(100);
            orginalTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            orginalTable.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(iName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addComponent(iSex, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(jLabel1)
                                .addGap(99, 99, 99)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel3)
                                .addGap(43, 43, 43)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(iAge, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iTime, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iName)
                    .addComponent(iAge)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iSex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "By Name", "By Age", "By Time", "By Sex" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Sort");

        copyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N0", "Name", "Sex", "Age", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        copyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copyTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(copyTable);
        if (copyTable.getColumnModel().getColumnCount() > 0) {
            copyTable.getColumnModel().getColumn(0).setMinWidth(30);
            copyTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            copyTable.getColumnModel().getColumn(0).setMaxWidth(40);
            copyTable.getColumnModel().getColumn(2).setMinWidth(60);
            copyTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            copyTable.getColumnModel().getColumn(2).setMaxWidth(60);
            copyTable.getColumnModel().getColumn(3).setMinWidth(50);
            copyTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            copyTable.getColumnModel().getColumn(3).setMaxWidth(50);
            copyTable.getColumnModel().getColumn(4).setMinWidth(100);
            copyTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            copyTable.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        jComboBox2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "15 - 18", "19 - 24", "25 - 30" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Age Group");

        javax.swing.GroupLayout comboSortLayout = new javax.swing.GroupLayout(comboSort);
        comboSort.setLayout(comboSortLayout);
        comboSortLayout.setHorizontalGroup(
            comboSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comboSortLayout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addGroup(comboSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comboSortLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        comboSortLayout.setVerticalGroup(
            comboSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comboSortLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(comboSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Edit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(390, 390, 390)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String name = iName.getText().toString();
        String sex = iSex.getSelectedItem().toString();
        double time = Double.parseDouble(iTime.getText().toString());
        int age = Integer.parseInt(iAge.getText().toString());
        list.add(new Swimmer(name, sex, age, time));
        
        
        
        for(int i=0; i<list.size(); i++){
            rowData[0] = i+1;
            rowData[1] = list.get(i).name;
            rowData[2] = list.get(i).Sex;
            rowData[3] = list.get(i).age;
            rowData[4] = list.get(i).time;
        }
        model.addRow(rowData);
        
//        System.out.println("Name: "+name);
//        System.out.println("Age: "+age);
//        System.out.println("Sex: "+sex);
//        System.out.println("Time "+time);
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void iTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iTimeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void copyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyTableMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_copyTableMouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here
        String selected = (String) jComboBox1.getSelectedItem();
        if(selected.equals("By Name")){
            System.out.println("Name Selected");
            copyModel.setRowCount(0);
            DisplayToTable(SortedByNameList, copyModel);
            //DisplayToTable(Sort(clonedList, "name"), copyModel);
        }else if(selected.equals("By Age")){
            System.out.println("Age selected");
            copyModel.setRowCount(0);
//            DisplayToTable(SortedByAge, copyModel);
        }else if(selected.equals("By Sex")){
            copyModel.setRowCount(0);
            System.out.println("Sex selected");
            DisplayToTable(Sort(clonedList, "sex"), copyModel);
        }else if(selected.equals("By Time")){
            System.out.println("Time slelected");
        }
            
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String currentlySelected = (String) jComboBox2.getSelectedItem();
        if(currentlySelected.equals("All")){
            copyModel.setRowCount(0);
            DisplayToTable(SortedByNameList, copyModel);
            System.out.println("All selected");
        }else if(currentlySelected.equals("15 - 18")){
            ArrayList<Swimmer> ageGroup1 = new ArrayList<Swimmer>();
            for(int i = 0; i < clonedList.size(); i++){
                if(clonedList.get(i).age > 15 && clonedList.get(i).age < 19){
                    ageGroup1.add(clonedList.get(i));
                }
            }
            copyModel.setRowCount(0);
            DisplayToTable(ageGroup1, copyModel);
            //System.out.println("15-18");
        }else if(currentlySelected.equals("19 - 24")){
            ArrayList<Swimmer> ageGroup2 = new ArrayList<Swimmer>();
            for(int i = 0; i < clonedList.size(); i++){
                if(clonedList.get(i).age > 18 && clonedList.get(i).age < 25){
                    ageGroup2.add(clonedList.get(i));
                }
            }
            copyModel.setRowCount(0);
            DisplayToTable(ageGroup2, copyModel);
            //System.out.println("18-25");
        }else if(currentlySelected.equals("25 - 30")){
//            System.out.println("25-29");
            ArrayList<Swimmer> ageGroup3 = new ArrayList<Swimmer>();
            for(int i = 0; i < clonedList.size(); i++){
                if(clonedList.get(i).age > 24 && clonedList.get(i).age < 30){
                    ageGroup3.add(clonedList.get(i));
                }
            }
            copyModel.setRowCount(0);
            DisplayToTable(ageGroup3, copyModel);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Swimmers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Swimmers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Swimmers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Swimmers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Swimmers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JPanel comboSort;
    private javax.swing.JTable copyTable;
    private javax.swing.JTextField iAge;
    private javax.swing.JTextField iName;
    private javax.swing.JComboBox<String> iSex;
    private javax.swing.JTextField iTime;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orginalTable;
    // End of variables declaration//GEN-END:variables
}
